1 - to use DbContext first add nuget pkg.
    - Microsoft.EntityFrameworkCore
2 - to use Database for eg sqlite use below pkg
    - Microsoft.EntityFrameworkCore.Sqlite


**select the version same to your project version for eg. in this case we are using .Net core 3.1

To add migration and update database/scaffold we need:
 - Microsoft.EntityFrameworkCore.Tools 
 - Microsoft.EntityFrameworkCore.Design


 Plan-----------------
 1 - Create API project that will deal with HTTP requests.
 2 - Create Core project that will handle the business logic e.g. entities etc.
 3 - Create Infrastructure project that will deal with DataAccesss and all.
        **cmd for cl => dotnet new classlib -o <ProjectName>

                                             E-commerce
                                                |
                    API(Webapi)<SL>------------Core(CL)-----------Infrastructure(CL)<DAL> 

4 - Add them to sln => dotnet sln add [Projname]/
5 - Make sure to match targetRefrence version for core3.1 for all projects and run restore command
        ** goto each project folder -> dotnet restore
5 - Add refrences of projects => API refrences Infrastructure and Infrastructure refrences Core and
    restore the projects
        ** goto project folder and run -> dotnet add reference <ProjectName>
        ** goto each project folder -> dotnet restores

6-> since we have first created API then project so we need to make adjustment in project files.
    A - Move Data(including migrations files) folder to Infrastructure since it will deal with database
        activities.
    B - Move Entity folder to Core project since it will deal with models and business logic.
    C - Once done please update namespace and using statments since things are reallocated.
    D - We need to Microsoft.EntityFrameworkCore && Microsoft.EntityFrameworkCore.Sqlite from API csproj 
        to Infrastructure.csproj
    E - We will keep Microsoft.EntityFrameworkCore.Tools and Design in API.csproj since it is startup
    F - Finally Run -> dontet build to build the project if found error please recheck and rebuild. 
7 - Okay so now everything is good lets do version contro using git.
    A - goto root dir and check > git status (if error then we need to init a plain repo)
    B - > git init (it will make the root folder a master)
    C - the above operation will stage all files but we don't want all files instead we 
        want only those to be tracked which we changed so we gonna ignor some files
        so come to root folder and make file <.gitignore> and add below filename in it:
            obj
            bin
            appsettings.json
            *.db
    D - So now we need to track & commit all files currently untracked.
            >git add . (. represent current dir's all files)
            >git commit -m ["messages"] --> it will commit to our source control
    E - Now we want to push committed files to remote repository that will make our 
        accessible
            A - now goto browser git page and create new repository and run below cmds
                    > git remote add origin <url> 
                    > git push -u origin master

--------------------------------
# Extending the Features

1 - repository model -> lets abstract our data access layer from the controller and we can do that:
        A - Making a repository which have DataAccesss reference and then we can inject repository
            inside our controller.
            a - To do this we shall Create an interface and implement this is a class later add the
                service to startup file.
                    create IProductRepository inside Core.Entities and implement this inside Infrastructure.Data directory.

                    Task<Product> GetProductByIdAsync(int id);
                    Task<IReadOnlyList<Product>> GetProductsAsync();

                    Once done goto startup and add the service.

                        services.AddScoped<IProductRepository, ProductRepository>();

        B - Now time to inject in controller so goto ProductsController and inject it.
2 - Adding fields ->Lets add some more field to Product entity [Description, PicUrl, Price,
                    ProductType<FK>, ProductBrand<FK>, FKsID]

3 - Migration -> First need to drop db and add migration since fields are altered.
                    * DataContext is in other proj and startup in other proj so we need to 
                      change the EntityFrameworkCore command a little.
                A- first drop the database.
                    > dotnet ef database drop -p <projectname_migration> -s <startup_proj>
                B - remove migration
                    > dotnet ef migrations remove -p <projectname_migration> -s <startup_proj>
                C - add migrations
                    > dotnet ef migrations add <migrationName>-p <projectname_migration> -s 
                      <startup_proj> -o <where to create>

4 - Constraints ->  We may want to add specific condtion to our entities so we can apply some rule.
                    We don't want to do directly on our context class instead we will make config file
                    to apply the rules on entities.
                        **  Create Infrastructure
                                        |_Data
                                            |_config--> ProductConfiguration.cs

                    this class shall inherit -> IEntityTypeConfiguration<className>
                    Now we will implement configure() where we can add rules.

                            Property(p=> p.Name).IsRequired().HasMaxLength(100);
                            Property(p => p.Description).IsRequired().HasMaxLength(200);
                            Property(p=> p.Price).HasColumnType("decimal(18,2)");
                            Property(p=> p.PictureUrl).IsRequired();
                            HasOne(b => b.ProductBrand).WithMany().HasForeignKey(p => p.ProductBrandId);
                            HasOne(b => b.ProductType).WithMany().HasForeignKey(p => p.ProductTypeId);

                    Now goto contextClass and override OnModelCreating()